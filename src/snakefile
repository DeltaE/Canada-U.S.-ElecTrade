import itertools
from pathlib import Path

#####################################
## REQUIRED FILES 
#####################################

osemosysFiles = [
	'AccumulatedAnnualDemand.csv',
	'AnnualEmissionLimit.csv',
	'AnnualExogenousEmission.csv',
	'AvailabilityFactor.csv',
	'CapacityFactor.csv',
	'CapacityOfOneTechnologyUnit.csv',
	'CapacityToActivityUnit.csv',
	'CapitalCost.csv',
	'CapitalCostStorage.csv',
	'Conversionld.csv',
	'Conversionlh.csv',
	'Conversionls.csv',
	'DAILYTIMEBRACKET.csv',
	'DaysInDayType.csv',
	'DaySplit.csv',
	'DAYTYPE.csv',
	'default_values.csv',
	'DepreciationMethod.csv',
	'DiscountRate.csv',
	'DiscountRateStorage.csv',
	'EMISSION.csv',
	'EmissionActivityRatio.csv',
	'EmissionsPenalty.csv',
	'FixedCost.csv',
	'FUEL.csv',
	'InputActivityRatio.csv',
	'MinStorageCharge.csv',
	'MODE_OF_OPERATION.csv',
	'ModelPeriodEmissionLimit.csv',
	'ModelPeriodExogenousEmission.csv',
	'OutputActivityRatio.csv',
	'OperationalLife.csv',
	'OperationalLifeStorage.csv',
	'REMinProductionTarget.csv',
	'REGION.csv',
	'ReserveMargin.csv',
	'ReserveMarginTagFuel.csv',
	'ReserveMarginTagTechnology.csv',
	'ResidualCapacity.csv',
	'ResidualStorageCapacity.csv',
	'RETagFuel.csv',
	'RETagTechnology.csv',
	'SEASON.csv',
	'SpecifiedAnnualDemand.csv',
	'SpecifiedDemandProfile.csv',
	'STORAGE.csv',
	'StorageLevelStart.csv',
	'StorageMaxChargeRate.csv',
	'StorageMaxDischargeRate.csv',
	'TECHNOLOGY.csv',
	'TechnologyFromStorage.csv',
	'TechnologyToStorage.csv',
	'TIMESLICE.csv',
	'TotalAnnualMaxCapacity.csv',
	'TotalAnnualMaxCapacityInvestment.csv',
	'TotalAnnualMinCapacity.csv',
	'TotalAnnualMinCapacityInvestment.csv',
	'TotalTechnologyAnnualActivityLowerLimit.csv',
	'TotalTechnologyAnnualActivityUpperLimit.csv',
	'TotalTechnologyModelPeriodActivityLowerLimit.csv',
	'TotalTechnologyModelPeriodActivityUpperLimit.csv',
	'TradeRoute.csv',
	'VariableCost.csv',
	'YEAR.csv',
	'YearSplit.csv'
]

#####################################
## TARGETS
#####################################

configfile: Path('..', 'scripts', 'config.yaml')
fileName = 'CanadaUSA'
inputDir = Path('..','dataSources')
scriptsDir = Path('..','scripts')
outputDir = Path('..', 'src')
canadaProvinces = list(itertools.chain.from_iterable(
	config['regions_dict']['CAN'].values()))

rule all:
	input: 
		f'{fileName}.txt'

rule data_file:
	input:
		f'{fileName}.txt'

#rule lp_file:
#	input: 
#		Path(outputDir, fileName, '.lp')

#####################################
## INTERMEDIATE RULES
#####################################

rule make_sets:
	input:
		Path(inputDir, 'Trade.csv'),
		Path(inputDir, 'USA_Data.xlsx'),
	output:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(outputDir, 'data', 'EMISSION.csv'),
		Path(outputDir, 'data', 'STORAGE.csv'),
		Path(outputDir, 'data', 'TECHNOLOGY.csv'),
		Path(outputDir, 'data', 'FUEL.csv')
	log:
		'logs/make_sets.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/make_sets.py'

rule availability_factor:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'AvailabilityFactor.csv')
	log:
		'logs/availability_factor.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/availability_factor.py'

rule capacity_factor:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'NREL_Costs.csv'),
		Path(inputDir, 'USA_Data.xlsx'),
		expand(Path(inputDir,'CapacityFactor/SPV_{province}.csv'), 
			province = canadaProvinces),
		expand(Path(inputDir, 'CapacityFactor/WND_{province}.csv'), 
			province = canadaProvinces)
	output:
		Path(outputDir,'data', 'CapacityFactor.csv')
	log:
		'logs/capacity_factor.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/capacity_factor.py'

rule capacity_activity_unit:
	input:
		Path(outputDir, 'data', 'REGION.csv'),
		Path(outputDir, 'data', 'TECHNOLOGY.csv'),
		Path(inputDir, 'Trade.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'CapacityToActivityUnit.csv')
	log:
		'logs/capacity_activity_unit.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/capacity_activity_unit.py'

rule costs:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'NREL_Costs.csv'),
		Path(inputDir, 'P2G_FC_Costs.xlsx'),
		Path(inputDir, 'Trade.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'CapitalCost.csv'),
		Path(outputDir, 'data', 'FixedCost.csv'),
		Path(outputDir, 'data', 'VariableCost.csv')
	log:
		'logs/costs.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/costs.py'

rule emission_activity_ratio:
	input:
		Path(inputDir, 'EmissionActivityRatioByTechnology.csv'),
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'EmissionActivityRatio.csv')
	log:
		'logs/emission_activity_ratio.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/emission_activity_ratio.py'

rule in_out_activity_ratio:
	input:
		Path(inputDir, 'InputActivityRatioByTechnology.csv'), 
		Path(inputDir, 'OutputActivityRatioByTechnology.csv'),
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'Trade.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'InputActivityRatio.csv'),
		Path(outputDir, 'data', 'OutputActivityRatio.csv')
	log:
		'logs/in_out_activity_ratio.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/in_out_activity_ratio.py'

rule reserve_margin:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'ProvincialAnnualDemand.csv'),
		Path(inputDir, 'USA_Demand.xlsx'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'ReserveMargin.csv'),
		Path(outputDir, 'data', 'ReserveMarginTagTechnology.csv'),
		Path(outputDir, 'data', 'ReserveMarginTagFuel.csv')
	log:
		'logs/reserve_margin.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/reserve_margin.py'

rule residual_capacity:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'OperationalLifeTechnology.csv'),
		Path(inputDir, 'ResidualCapacitiesByProvince.csv'),
		Path(inputDir, 'Trade.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'ResidualCapacity.csv'),
		Path(outputDir, 'data', 'OperationalLife.csv')
	log:
		'logs/residual_capacity.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/residual_capacity.py'

rule specified_annual_demand:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'ProvincialAnnualDemand.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'SpecifiedAnnualDemand.csv')
	log:
		'logs/specified_annual_demand.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/specified_annual_demand.py'

rule specified_demand_profile:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'ProvincialHourlyLoads.xlsx'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'SpecifiedDemandProfile.csv')
	log:
		'logs/specified_demand_profile.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/specified_demand_profile.py'

rule storage_costs:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'CapitalCostStorage.csv')
	log:
		'logs/storage_costs.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/storage_costs.py'

rule storage_life:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'OperationalLifeStorage.csv')
	log:
		'logs/storage_life.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/storage_life.py'

rule emission_penalty:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'EmissionPenaltyByYear.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'EmissionsPenalty.csv')
	log:
		'logs/emission_penalty.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/emission_penalty.py'

rule re_tags:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'RETagTechnology.csv')
	log:
		'logs/re_tags.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/re_tags.py'

rule tech_to_from_storage:
	input:
		Path(outputDir, 'data', 'YEAR.csv'),
		Path(outputDir, 'data', 'REGION.csv'),
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'TechnologyToStorage.csv'),
		Path(outputDir, 'data', 'TechnologyFromStorage.csv')
	log:
		'logs/tech_to_from_storage.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/tech_to_from_storage.py'

rule total_annual_max_capacity:
	input:
		Path(inputDir, 'USA_Data.xlsx')
	output:
		Path(outputDir, 'data', 'TotalAnnualMaxCapacity.csv')
	log:
		'logs/total_annual_max_capacity.log'
	conda:
		'envs/preprocess.yaml'
	script:
		f'{scriptsDir}/total_annual_max_capacity.py'

rule otoole_convert:
	input:
		datapackage = Path(outputDir, 'datapackage.json'),
		csvFiles = expand(Path(outputDir, 'data', '{osemosysFile}'), 
			osemosysFile = osemosysFiles)
	output:
		f'{fileName}.txt'
	log:
		'logs/otoole_convert.log'
	conda:
		'envs/otoole_convert.yaml'
	shell:
		'otoole convert datapackage datafile '
		'{input.datapackage} {output} 2> {log}'

#rule create_lp:
#	input:
#		modelFile = Path(outputDir, 'osemosys_fast_TB.txt'),
#		dataFile = Path(outputDir, fileName, '.txt')
#	output:
#		Path(outputDir, fileName, '.lp')
#	log:
#		'logs/create_lp.log'
#	shell:
#		'glpsol -m {input.modelFile} -d {input.dataFile} '
#		'--wlp {output} --check 2> {log}'

